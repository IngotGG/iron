package gg.ingot.iron

import gg.ingot.iron.representation.DatabaseDriver
import gg.ingot.iron.serialization.ColumnAdapter
import gg.ingot.iron.serialization.ColumnDeserializer
import gg.ingot.iron.serialization.ColumnSerializer
import gg.ingot.iron.serialization.SerializationAdapter
import gg.ingot.iron.strategies.NamingStrategy
import java.util.*
import kotlin.reflect.KClass
import kotlin.time.Duration
import kotlin.time.Duration.Companion.seconds

/**
 * Settings for the Iron connection pool.
 * @author DebitCardz
 * @since 1.2
 */
data class IronSettings(
    /** Minimum active connections in the pool. */
    var minimumActiveConnections: Int = 1,
    /** Maximum connections allowed to be generated by a pool. */
    var maximumConnections: Int = minimumActiveConnections,
    /** The timeout for connection polling. */
    var connectionPollTimeout: Duration = 30.seconds,
    /** The driver to use for the connection pool. */
    var driver: DatabaseDriver? = null,
    /** The serialization adapter to use for models. */
    var serialization: SerializationAdapter? = null,
    /** Additional properties to pass into the [java.sql.DriverManager] */
    var driverProperties: Properties? = null,
    /** Naming Strategy to use when handling column names. */
    var namingStrategy: NamingStrategy = NamingStrategy.NONE,
) {
    var adapters: Adapters? = null
        private set

    /** Whether the connection pool is a multi connection pool. */
    val isMultiConnectionPool: Boolean
        get() = minimumActiveConnections > 1 || maximumConnections > 1

    /**
     * Sets the default adapters for the [Iron] instance.
     * @param block The block to apply to the adapters.
     */
    fun defaultAdapters(block: Adapters.() -> Unit) {
        require(adapters == null) { "Default adapters have already been set" }
        adapters = Adapters().apply(block)
    }

    init {
        require(minimumActiveConnections >= 0) { "Minimum active connections must be greater than or equal to 0" }
        require(maximumConnections > 0) { "Maximum connections must be greater than 0" }
        require(minimumActiveConnections <= maximumConnections) { "Minimum active connections must be less than or equal to maximum connections" }
    }

    /**
     * Represents the default adapters for the [Iron] instance.
     */
    class Adapters {
        /** The default adapters for the [Iron] instance. */
        private val defaultAdapters = mutableMapOf<KClass<*>, ColumnAdapter<*, *>>()
        /** The default serializers for the [Iron] instance. */
        private val defaultSerializers = mutableMapOf<KClass<*>, ColumnSerializer<*, *>>()
        /** The default deserializers for the [Iron] instance. */
        private val defaultDeserializers = mutableMapOf<KClass<*>, ColumnDeserializer<*, *>>()

        /**
         * Adds a default adapter for the [Iron] instance.
         * @param kClass The class to add the adapter for.
         * @param adapter The adapter to add.
         */
        fun adapter(kClass: KClass<*>, adapter: ColumnAdapter<*, *>) {
            defaultAdapters[kClass] = adapter
        }

        /**
         * Adds a default serializer for the [Iron] instance.
         * @param kClass The class to add the serializer for.
         * @param serializer The serializer to add.
         */
        fun serializer(kClass: KClass<*>, serializer: ColumnSerializer<*, *>) {
            defaultSerializers[kClass] = serializer
        }

        /**
         * Retrieves the default serializer for the provided class.
         * @param kClass The class to retrieve
         * @return The serializer for the class.
         */
        internal fun retrieveSerializer(kClass: KClass<*>): ColumnSerializer<*, *>? {
            return defaultAdapters[kClass] ?: defaultSerializers[kClass]
        }

        /**
         * Adds a default deserializer for the [Iron] instance.
         * @param kClass The class to add the deserializer for.
         * @param deserializer The deserializer to add.
         */
        fun deserializer(kClass: KClass<*>, deserializer: ColumnDeserializer<*, *>) {
            defaultDeserializers[kClass] = deserializer
        }

        /**
         * Retrieves the default deserializer for the provided class.
         * @param kClass The class to retrieve
         * @return The deserializer for the class.
         */
        internal fun retrieveDeserializer(kClass: KClass<*>): ColumnDeserializer<*, *>? {
            return defaultAdapters[kClass] ?: defaultDeserializers[kClass]
        }
    }
}

/**
 * Creates a new [IronSettings] with the provided block.
 * @param block The block to apply to the settings.
 * @return The created settings.
 */
fun ironSettings(block: IronSettings.() -> Unit): IronSettings {
    return IronSettings().apply(block)
}