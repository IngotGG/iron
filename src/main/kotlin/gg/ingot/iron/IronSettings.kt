package gg.ingot.iron

import gg.ingot.iron.representation.DatabaseDriver
import gg.ingot.iron.serialization.ColumnAdapter
import gg.ingot.iron.serialization.ColumnDeserializer
import gg.ingot.iron.serialization.ColumnSerializer
import gg.ingot.iron.serialization.SerializationAdapter
import gg.ingot.iron.stratergies.EnumTransformation
import gg.ingot.iron.stratergies.NamingStrategy
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.Dispatchers
import java.util.*
import kotlin.reflect.KClass
import kotlin.time.Duration
import kotlin.time.Duration.Companion.seconds
import kotlin.time.toKotlinDuration

/**
 * Settings for the Iron connection pool.
 * @author DebitCardz
 * @since 1.2
 */

data class IronSettings internal constructor(
    /** Minimum active connections in the pool. */
    var minimumActiveConnections: Int = 1,
    /** Maximum connections allowed to be generated by a pool. */
    var maximumConnections: Int = minimumActiveConnections,
    /** The timeout for connection polling. */
    var connectionPollTimeout: Duration = 30.seconds,
    /** How long connections should last before being closed if above the minimum */
    var connectionTTL: Duration = 10.seconds,
    /** The driver to use for the connection pool. */
    var driver: DatabaseDriver? = null,
    /** The serialization adapter to use for models. */
    var serialization: SerializationAdapter? = null,
    /** Additional properties to pass into the [java.sql.DriverManager] */
    var driverProperties: Properties? = null,
    /** Naming Strategy to use when handling column names. */
    var namingStrategy: NamingStrategy = NamingStrategy.NONE,
    /** The dispatcher to use when running coroutines. */
    var dispatcher: CoroutineDispatcher = Dispatchers.IO,
    /** How enums are handled when converting to and from the database. */
    var enumTransformation: EnumTransformation = EnumTransformation.Name,
    /** Whether booleans can only be read from the database as booleans and not strings (ex: yes, 1, true). */
    var strictBooleans: Boolean = false,
) {
    var adapters: Adapters? = null
        private set

    /** Whether the connection pool is a multi connection pool. */
    val isMultiConnectionPool: Boolean
        get() = minimumActiveConnections > 1 || maximumConnections > 1

    /**
     * Sets the default adapters for the [Iron] instance.
     * @param block The block to apply to the adapters.
     */
    fun defaultAdapters(block: Adapters.() -> Unit) {
        require(adapters == null) { "Default adapters have already been set" }
        adapters = Adapters().apply(block)
    }

    init {
        require(minimumActiveConnections >= 0) { "Minimum active connections must be greater than or equal to 0" }
        require(maximumConnections > 0) { "Maximum connections must be greater than 0" }
        require(minimumActiveConnections <= maximumConnections) { "Minimum active connections must be less than or equal to maximum connections" }
    }

    /**
     * Represents the default adapters for the [Iron] instance.
     */
    class Adapters {
        /** The default adapters for the [Iron] instance. */
        private val defaultAdapters = mutableMapOf<Class<*>, ColumnAdapter<*, *>>()
        /** The default serializers for the [Iron] instance. */
        private val defaultSerializers = mutableMapOf<Class<*>, ColumnSerializer<*, *>>()
        /** The default deserializers for the [Iron] instance. */
        private val defaultDeserializers = mutableMapOf<Class<*>, ColumnDeserializer<*, *>>()

        /**
         * Adds a default adapter for the [Iron] instance.
         * @param clazz The class to add the adapter for.
         * @param adapter The adapter to add.
         */
        fun adapter(clazz: Class<*>, adapter: ColumnAdapter<*, *>) {
            defaultAdapters[clazz] = adapter
        }

        /**
         * Adds a default adapter for the [Iron] instance.
         * @param clazz The kotlin class to add the adapter for.
         * @param adapter The adapter to add.
         */
        fun adapter(clazz: KClass<*>, adapter: ColumnAdapter<*, *>) {
            defaultAdapters[clazz.java] = adapter
        }

        /**
         * Adds a default serializer for the [Iron] instance.
         * @param clazz The class to add the serializer for.
         * @param serializer The serializer to add.
         */
        fun serializer(clazz: Class<*>, serializer: ColumnSerializer<*, *>) {
            defaultSerializers[clazz] = serializer
        }

        /**
         * Adds a default serializer for the [Iron] instance.
         * @param clazz The kotlin class to add the serializer for.
         * @param serializer The serializer to add.
         */
        fun serializer(clazz: KClass<*>, serializer: ColumnSerializer<*, *>) {
            defaultSerializers[clazz.java] = serializer
        }

        /**
         * Retrieves the default serializer for the provided class.
         * @param clazz The class to retrieve
         * @return The serializer for the class.
         */
        internal fun retrieveSerializer(clazz: Class<*>): ColumnSerializer<*, *>? {
            return defaultAdapters[clazz] ?: defaultSerializers[clazz]
        }

        /**
         * Adds a default deserializer for the [Iron] instance.
         * @param clazz The class to add the deserializer for.
         * @param deserializer The deserializer to add.
         */
        fun deserializer(clazz: Class<*>, deserializer: ColumnDeserializer<*, *>) {
            defaultDeserializers[clazz] = deserializer
        }

        /**
         * Adds a default deserializer for the [Iron] instance.
         * @param clazz The kotlin class to add the deserializer for.
         * @param deserializer The deserializer to add.
         */
        fun deserializer(clazz: KClass<*>, deserializer: ColumnDeserializer<*, *>) {
            defaultDeserializers[clazz.java] = deserializer
        }

        /**
         * Retrieves the default deserializer for the provided class.
         * @param clazz The class to retrieve
         * @return The deserializer for the class.
         */
        internal fun retrieveDeserializer(clazz: Class<*>): ColumnDeserializer<*, *>? {
            return defaultAdapters[clazz] ?: defaultDeserializers[clazz]
        }
    }

    class Builder {
        private var minimumActiveConnections: Int = 1
        private var maximumConnections: Int = minimumActiveConnections
        private var connectionPollTimeout: Duration = 30.seconds
        private var connectionTTL: Duration = 10.seconds
        private var driver: DatabaseDriver? = null
        private var serialization: SerializationAdapter? = null
        private var driverProperties: Properties? = null
        private var namingStrategy: NamingStrategy = NamingStrategy.NONE
        private var dispatcher: CoroutineDispatcher = Dispatchers.IO
        private var enumTransformation: EnumTransformation = EnumTransformation.Name
        private var strictBooleans: Boolean = false

        fun minimumActiveConnections(minimumActiveConnections: Int) = apply { this.minimumActiveConnections = minimumActiveConnections }
        fun maximumConnections(maximumConnections: Int) = apply { this.maximumConnections = maximumConnections }
        fun connectionPollTimeout(connectionPollTimeout: java.time.Duration) = apply { this.connectionPollTimeout = connectionPollTimeout.toKotlinDuration() }
        fun connectionTTL(ttl: java.time.Duration) = apply { this.connectionTTL = ttl.toKotlinDuration() }
        fun driver(driver: DatabaseDriver) = apply { this.driver = driver }
        fun serialization(serialization: SerializationAdapter) = apply { this.serialization = serialization }
        fun driverProperties(driverProperties: Properties) = apply { this.driverProperties = driverProperties }
        fun namingStrategy(namingStrategy: NamingStrategy) = apply { this.namingStrategy = namingStrategy }
        fun dispatcher(dispatcher: CoroutineDispatcher) = apply { this.dispatcher = dispatcher }
        fun enumTransformation(enumTransformation: EnumTransformation) = apply { this.enumTransformation = enumTransformation }
        fun strictBooleans(strictBooleans: Boolean) = apply { this.strictBooleans = strictBooleans }

        fun build(): IronSettings {
            return IronSettings(
                minimumActiveConnections,
                maximumConnections,
                connectionPollTimeout,
                connectionTTL,
                driver,
                serialization,
                driverProperties,
                namingStrategy,
                dispatcher,
                enumTransformation,
                strictBooleans
            )
        }
    }
}